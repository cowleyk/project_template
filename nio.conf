[DEFAULT]

[environment]

# Location of custom extensions for auto-discovery
#
#blocks=blocks
#components=niocore.components
#services=nio.service

[components]

# discoverable components that should be disabled from project
#
#disabled=SNMPAgent

[service]

# specify block router class used by services
#
#block_router=nio.router.thread_pool_executor.ThreadedPoolExecutorRouter

# when launching nio, start auto-start services asynchronously
#
#async_start=true

# clone signals when a block notifies to two blocks
#
#clone_signals=true

# block router verifies that objects processed by blocks are nio signals
#
#check_signal_type=true

# when using ThreadedPoolExecutorRouter max workers is the maximum number of
# threads that will run concurrently
#
#thread_pool_max_workers=50

# time to wait for a service's response when sending an IPC request
#
#ipc_request_time_to_live=2

[logging]

# dictionary of python logging configuration
#
conf=etc/logging.json

[providers]

# file provider python module
#
#type=niocore.configuration.providers.file.FileConfigurationProvider

# path to configuration file provider
#
#config_directory=etc

[communication]

# is this the master broker or a slave node
#
master=[[MASTER_BROKER]]

# the ip address of the master broker
#
broker_ip_address=[[COMHOST]]

# your public ip address to use when publishing, and subscribers can reach
# you on, gets overriden when specifying ip_interface
#
# ip_address=[[IP]]

# optionally set ip_address dynamically by interface name
#
ip_interface=en0

# minimum port value that a new publisher can be assigned to
#
publisher_min_port=9010

# maximum port value that a new publisher can be assigned to
#
publisher_max_port=9199

# matching algorithm to use for subscribers
#
#matching=nio.modules.communication.matching.default.DefaultMatching

# interval between publisher heartbeats
#
#publisher_heartbeat_interval=30

# maximum time to wait before considering a Publisher invalid
#
#publisher_heartbeat_timeout=100

# ports used by broker and clients to communicate with each other
#
broker_xpub_port=[[XPUB_PORT]]
broker_xsub_port=[[XSUB_PORT]]

# interval between broker heartbeats
#
#broker_heartbeat_interval=30

# maximum time to wait before a broker considers a client invalid
#
#broker_heartbeat_timeout=100

# interval at which to check if a handshake response has been obtained from broker
#
#broker_handshake_interval=0.1

# time to wait before a client gives up waiting for broker to acknowledge its presence
#
#broker_handshake_timeout=5

# rate (in milliseconds) at which broker checks for messages
#
#broker_poll_rate=100

# time to wait for removal of publishers and listeners to clean up during stop
#
#publishers_notification_timeout=5

# time to wait after publisher is marked for deletion and it's actual deletion - allows for listeners to unsubscribe before publisher deletion
#
#listeners_removal_timeout=2

# interval at which to retry removing listeners if some are still active after publisher deletion
#
#termination_retry_interval=0.1

# time to wait before retrying a networking connection after failure
#
#connect_interval=1

# time to wait when establishing a network connection
#
#connect_timeout=0

# linger period determines how long pending messages which have yet to be sent to a peer shall linger in memory after a socket is disconnected
#
#linger=1000

# high water mark is a hard limit on the maximum number of outstanding messages ZMQ shall queue in memory
#
#hwm_size=100000

# sets the maximum number of sockets allowed on the context
#
#max_sockets=1023

# size of the ZMQ thread pool to handle I/O operations. If your application is using only the inproc transport for messaging you may set this to zero, otherwise set it to at least one.
#
#max_io_thread_count=1

# zmq setting timeout setting for initial client subscription
#
#zmq_port_reconnect_timeout=3

[persistence]

# directory to store persistence files
#
#data=etc/persist

[scheduler]
# minimum amount of time allowed for a scheduled job
#
#min_interval=0.1

# interval at which the scheduler will check for jobs to be run
#
#resolution=0.1

[security]

# json configuration that defines users and their passwords - can point to a conf file
#
#users=etc/users.json

# json configuration that maps users to permissions - can point to a conf file
#
#permissions=etc/permissions.json

# [security.oauth]
#
## json configuration that maps users to permissions - can point to a conf file
##
##permissions=etc/permissions.json
#
## identify client that is making responses - used to get an access token
##
##client_id=407408718192.apps.googleusercontent.com
#
## url for validating access token
##
##validate_url=https=/www.googleapis.com/oauth2/v2/tokeninfo?access_token=%%s

[web]

# web server max thread pool size
#
#server_thread_pool=50

# include error traceback when reporting failed requests
#
#request_show_tracebacks=false

[management_publisher]

# pubsub topic key to publish on
#
#topics_key=type

# pubsub topic value to publish on (for the given key)
#
#topics_value=management

[rest]

# settings for the web server that will host the core REST API
#

# host and port to launch rest web server on
#
port=[[NIOPORT]]
host=[[NIOHOST]]

# if configured host is unavailable, interval at which network availability is checked and web server restarted
#
#network_retry_interval=30

# path to ssl certificate files
#
ssl_certificate:
ssl_private_key:
# optional certificate chain
ssl_certificate_chain:

[service_monitor]

# interval (in seconds) to check on services in "started"
#
#healthy_monitor_interval=30

# interval (in seconds) to check on services in "error"
#
#failed_monitor_interval=60

[snmp]

# host and port to launch snmp agent on
#
#host=127.0.0.1
#port=161

# community security name and agent name mapping
#
#community_index=agent
#community_name=public

# host and port to launch snmp trap server on
#
#trap_host=127.0.0.1
#trap_port=162

# community agent name for traps
#
#trap_community_index=agent

# comma separated list of services to register status change traps for
#
#status_traps=error
